// Define database connection via the `NEXT_PUBLIC_PRISMA_DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("LOCAL_PRISMA_DATABASE_URL")
}

// Define custom output path for generated Prisma Client
generator client {
  provider = "prisma-client-js"
  // Use default output (node_modules/.prisma/client) to avoid absolute paths
}

// Example data model
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Module    Module?  @relation(fields: [moduleId], references: [id])
  moduleId  Int?
  images    Images[]
}

model WidgetType {
  id        Int      @id @default(autoincrement())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  widgets   Widget[]
}

model Widget {
  id         Int        @id @default(autoincrement())
  WidgetType WidgetType @relation(fields: [typeId], references: [id])
  typeId     Int
  name       String
  content    String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  Module     Module?    @relation(fields: [moduleId], references: [id])
  moduleId   Int?
  images     Images[]
}

model Module {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  widgets   Widget[]
  posts     Post[]
  images    Images[]
  pages     Page?    @relation(fields: [pageId], references: [id])
  pageId    Int?
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Widget    Widget?  @relation(fields: [widgetId], references: [id])
  widgetId  Int?
  Module    Module?  @relation(fields: [moduleId], references: [id])
  moduleId  Int?
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

model Page {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  PageSEO   PageSEO  @relation(fields: [pageSEOId], references: [id])
  pageSEOId Int
  Module    Module[]
}

model PageSEO {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  keywords    String[]
  canonical   String?
  noIndex     Boolean  @default(false)
  noFollow    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Page        Page[]
}
