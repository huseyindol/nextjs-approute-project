// Define database connection via the `NEXT_PUBLIC_PRISMA_DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("LOCAL_PRISMA_DATABASE_URL")
}

// Define custom output path for generated Prisma Client
generator client {
  provider = "prisma-client-js"
  // Use default output (node_modules/.prisma/client) to avoid absolute paths
}

model Page {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  PageSEO   PageSEO? @relation(fields: [pageSEOId], references: [id])
  pageSEOId Int?
}

model PageSEO {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  keywords    String[]
  canonical   String?
  noIndex     Boolean  @default(false)
  noFollow    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Page        Page[]
}

model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  password  String
  firstName String?
  lastName  String?
  posts     PostAuthor[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
}

model Post {
  id        Int          @id @default(autoincrement())
  title     String
  content   String?
  published Boolean      @default(false)
  authors   PostAuthor[]
  images    Images[]
}

model PostAuthor {
  postId   Int
  authorId Int
  post     Post @relation(fields: [postId], references: [id])
  author   User @relation(fields: [authorId], references: [id])

  @@id([postId, authorId])
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}
